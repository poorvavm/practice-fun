Commands
============
> django-admin startproject MyProject                           # Start a new Project
> python manage.py runserver                                    # run django server
> python manage.py startapp main_app                            # run an application
> python manage.py makemigrations                               # make a migration file from model update
> python manage.py migrate                                      # Run that migration
> python manage.py shell                                        # run python django shell
> python manage.py createsuperuser                              # create admin level super user
> 

MVC <-> Django
===============
Model = Model
View = Template
Controller = View

Django Structure
=================
-  Project
   -  project dir
      -  settings.py
         -  installated apps list, each new app needs to be added here
         -  

      -  urls.py
          -  matches the requested URL to the correct view
          -  eg:
             from myapp import views
             urlpatterns=[
                url(r'^index/', views.index)
             ]
          
          -  Best practices:
          -  Good to have an project url dispatcher and an app url dispatcher
          -  eg:
             from django.conf.urls import include, url
             urlpatterns=[
                url(r'^app/', include(main_app.urls))
             ]

      -  wsgi.py

   -  app
      -  views 
         -  takes in a web request and responds
         -  views.py
         -  eg: for index localhost:8000/index
            def index(request):
                return HTTPResponse('<h1> Hello world!</h1>')

      -  statics dir
         -  contains files like styles.css, bootstrap.min.css
         -  django auto looks for static files in here

      -  urls.py
         -  app level urls

      -  forms.py
         -  if you want to define any forms in django app
         -  this is similar to defining a model
         -  create a post url in urls.py
         -  create a view that handles the post url
         -  to display create a template by adding form \tag and csrf_token
         -  forms.as_p in template formats the form as paragraph on UI. basically
            each field on a separate line. 
         -  widgets such as date widget can be added to add form field widgets. 
         -  meta forms can be used to create forms directly from model classes

      -  Templates folder
         -  can be called using render function in views
         -  django built in template tags and filters
            for, if, filter, firstof, forloop.counter, ifchanged, include, etc. 
            https://docs.djangoproject.com/en/2.1/ref/templates/builtins/
         -  template inheritance
            templates can extend other templates to keep the code modular and simpler 
         -  block content is the content specifc for own page

         
      -  models.py
         -  https://docs.djangoproject.com/en/2.1/ref/models/fields/

      -  admin.py
         -  in order to see models in admin UI, register the models here
         -  eg:
            from .models import myModel
            admin.site.register(myModel)

-  Admin
   -  localhost:800/admin
   -  use createsuperuser command to create a login user for this
   -  groups and users auto created
   -  models needs to be added to be viewed here

-  Inbuilt auth user model
   -  any model can import the model and use objects of built in user model
      from django.contrib.auth.models import User

imports
==========
from django.http import HTTPResponse
from django.contrib import admin
from django.conf.urls import include, url
from django.db import models
from django.contrib.auth.models import User


