LOAD CSV WITH HEADERS FROM "file:///Users/vishalm/desk/github/vishalrepo/courses/BigData/05_Graph_Analysis/03_GraphAnalyticsTechniques/neo4j_module_datasets/test.csv" AS line
MERGE (n:MyNode {Name:line.Source})
MERGE (m:MyNode {Name:line.Target})
MERGE (n) -[:TO {dist:line.distance}]-> (m)

match (n)-[r]-() delete n, r
match (n) delete n



======================
Load the gene_gene_association_50k.csv (instead of the text.csv),
-  Define the node type to be TrialGene,
-  Add a Name property to the source node and assign the OFFICIAL_SYMBOL_A column values to it,
-  Add a Name property to the target node and assign the OFFICIAL_SYMBOL_B column values to it,
-  Define the edge type to be AssociationType,
-  Give each edge a property named AssociatedWith and assign the content of the 
    column in the dataset with the heading EXPERIMENTAL_SYSTEM.


LOAD CSV WITH HEADERS FROM "file:///Users/vishalm/desk/github/vishalrepo/courses/BigData/05_Graph_Analysis/03_GraphAnalyticsTechniques/03_Assignment/gene_gene_associations_50k.csv" AS line
MERGE (n:TrialGene {Name:line.OFFICIAL_SYMBOL_A})
MERGE (m:TrialGene {Name:line.OFFICIAL_SYMBOL_B})
MERGE (n) -[:AssociationType {AssociatedWith:line.EXPERIMENTAL_SYSTEM}]-> (m)

======================

1. Calculate number of nodes in the graph.

match (n:TrialGene)
return count(n)

9656

======================
2. Calculate the number of edges in the graph.

match (n:TrialGene)-[r]->()
return count(r)

46621

======================
3. Calculate the number of loops in the graph.

match (n)-[r]->(n)
return count(r)


1221
======================
4. Submit the following query and report the results.

match (n)-[r]->(m) 
where m <> n 
return distinct n, m, count(r)


Returned 37823 rows

======================


5. Interpret the results of the query in Step 4 above.


the count of all non loop edges between every adjacent node pair.

======================
6. Submit the following query and report the results:

match (n)-[r]->(m) 
where m <> n 
return distinct n, m, count(r) as myCount
order by myCount desc 
limit 1


n   Name    BRCA1
m   Name    BARD1
myCount     7

the pair of nodes with the maximum number of multi-edges between them

======================
7. Run the following query and interpret the results:

match p=(n {Name:'BRCA1'})-[:AssociationType*..2]->(m) 
return p


Returned 8394 rows i
The 2-neighborhood of the node whose name is ‘BRCA1’

======================
8. Count how many shortest paths there are between the node named ‘BRCA1’ and the node named ‘NBR1’.

//All Shortest Paths:
MATCH p = allShortestPaths(source-[r:AssociationType*]-destination)
WHERE source.Name='BRCA1' AND destination.Name = 'NBR1'
RETURN EXTRACT(n IN NODES(p)| n.Name) AS Paths

returned 9 rows

======================
9. Find the top 2 nodes with the highest outdegree.


match (n:TrialGene)-[r]->()
return n.Name as Node, count(r) as Outdegree
order by Outdegree desc
union
match (a:TrialGene)-[r]->(leaf)
where not((leaf)-->())
return leaf.Name as Node, 0 as Outdegree



SNCA and BRCA1

======================
10. Modify one of the Cypher queries we provided and create the degree histogram for the network, then calculate how many nodes are in the graph having a degree of 3.


match (n:TrialGene)-[r]-()
with n as nodes, count(distinct r) as degree
return degree, count(nodes) order by degree asc



821
======================




